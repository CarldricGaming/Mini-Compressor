[Compression methods]
x  = 9            ;highest compression mode using only internal algorithms
#  = #rep+#exe+#xb / $obj=#b / $text=#t
#t  = dict:p:128m:80% + lzp:160m:145:d1m:s32:h23:92% + ppmd:16:384m

#b  = #rep + #bx
#bx = #xb
#xb = delta + #binary

9rep  = rep:2040m
9binary = lzma:512m:ultra:a1:mfbt4:fb273:mc100000:lc8:lp4:pb4

#exe = exe2
exe2 = dispack
dispack = dispack070

; Deflated Data Masks
static   = srep:m3f:a2+exe2
lolz1    = lolz:d128m:mt2
lolz2    = lolzi:d128m:mt2
lz2      = lzma2:d128m:mt2

[External compressor:lzma2]
; -ms1024m
header    = 0
packcmd   = "lz\xz" a -txz -an -m0=lzma2{:option}:fb=273:mf=bt4:mc=100000000:lc=4:lp=0  -mx9 -si -so <stdin> <stdout> 
unpackcmd = "lz\xz" x -txz -an -y -si -so <stdin> <stdout>

[External compressor:xprecomp,xtool,xt]
header    = 0
packcmd   = "xtool\xtool" precomp -mzlib:l68+reflate:l6+lz4hc:l9 -c128mb -t100p --dbase --dedup - $$arcpackedfile$$.tmp <stdin>
unpackcmd = "xtool\xtool" decode -t75p - - <stdin> <stdout>

[External compressor:xtoodle]
header    = 0
packcmd   = "xtool\xtool" precomp -moodle:l7 -c128mb -t100p --dbase --dedup - $$arcpackedfile$$.tmp <stdin>
unpackcmd = "xtool\xtool" decode -t75p - - <stdin> <stdout>

[External compressor:xtzstd]
header    = 0
packcmd   = "xtool\xtool" precomp -mzstd:l19 -c128mb -t100p --dbase --dedup - $$arcpackedfile$$.tmp <stdin>
unpackcmd = "xtool\xtool" decode -t75p - - <stdin> <stdout>

[External compressor:bpk]
header = 0
packcmd   = fazip.exe -i0 compress:bpk <stdin> <stdout>
unpackcmd = "CLS\fazip.exe" -i0 decompress:lolz <stdin> <stdout>

[External compressor:lolz]
header = 0
packcmd = "lz\lolz_x64.exe" {options} $$arcdatafile$$.tmp $$arcpackedfile$$.tmp
unpackcmd = "CLS\fazip.exe" -i0 decompress:lolz <stdin> <stdout>

[External compressor:lolzi]
header = 0
packcmd   = "lz\lolz2_x64.exe" {options} $$arcdatafile$$.tmp $$arcpackedfile$$.tmp
unpackcmd = "lz\lolz2_x64.exe" $$arcpackedfile$$.tmp $$arcdatafile$$.tmp

[External compressor:lepton]
header = 0
packcmd   = "7z-x64\7z.exe" a -tpa -mf=off -m0=lepton2 -si $$arcpackedfile$$.tmp <stdin>
unpackcmd = "7z-x64\7z.exe" x -tpa $$arcpackedfile$$.tmp -so <stdout>
solid = 0

[External compressor:jojpeg]
header = 0
packcmd   = "7z-x64\7z.exe" a -tpa -bb3 -m0=jojpeg -mx=9 $$arcpackedfile$$.tmp -si <stdin>
unpackcmd = "7z-x64\7z.exe" x -tpa $$arcpackedfile$$.tmp -so <stdout>
solid = 0

[External compressor:jpg]
packcmd   = "media\packjpg_x64" -np $$arcdatafile$$.jpg
unpackcmd = packjpg_x64 -np $$arcdatafile$$.pjg
datafile   = $$arcdatafile$$.jpg
packedfile = $$arcdatafile$$.pjg
solid = 0

[External compressor:packmp3]
header = 0
packcmd   = "7z-x64\7z.exe" a -tpa -m0=rep1:fb256:c256M:mem=2000M -m1=mp3det -m2=packmp3c:mt4:c64M $$arcpackedfile$$.tmp -si <stdin>
unpackcmd = "7z-x64\7z.exe" x -tpa $$arcpackedfile$$.tmp -so <stdout>

[External compressor:pzlib,plz4,plzo,pzstd]
header    = 0
packcmd   = "ztool\ztool198" e:{compressor}{:option} - <stdin> $$arcpackedfile$$.tmp 
unpackcmd = "ztool\ztool198" d:{compressor}{:option}:t100p - - <stdin> <stdout>

[External compressor:poodle]
header = 0
packcmd     = "ztool\poodle" e:poodle:t100p:cm0 - <stdin> $$arcpackedfile$$.tmp
unpackcmd   = "ztool\poodle" d:poodle:t100p:cm0 - - <stdin> <stdout>

[External compressor:msc]
;Alt: -f = Forced on bigger data //-frog=9 use this instead of -tak=9 = yields error on decomp.
header = 0
packcmd = "msc\msc.exe" c -v -wav=1 -raw=1 -bmp=1 -ddsraw=1 -ddsdxt=1 -mp3=1 -bmf=9s -tak=9 -dxt=1 -lzma=hc4,lc8,lp2,pb2,fb273,mc1000 $$arcdatafile$$.tmp $$arcpackedfile$$.tmp

[External compressor:mscmp3]
;Alt: -f = Forced on bigger data //-frog=9 use this instead of -tak=9 = yields error on decomp.
header = 0
packcmd = "msc\msc.exe" c -v -wav=0 -raw=0 -bmp=0 -ddsraw=0 -ddsdxt=0 -mp3=1 -bmf=9s -tak=9 -dxt=0 -lzma=hc4,lc8,lp2,pb2,fb273,mc1000 $$arcdatafile$$.tmp $$arcpackedfile$$.tmp

[External compressor:mscwav]
;Alt: -f = Forced on bigger data //-frog=9 use this instead of -tak=9 = yields error on decomp.
header = 0
packcmd = "msc\msc.exe" c -v -wav=1 -raw=0 -bmp=0 -ddsraw=0 -ddsdxt=0 -mp3=0 -bmf=9s -tak=9 -dxt=0 -lzma=hc4,lc8,lp2,pb2,fb273,mc1000 $$arcdatafile$$.tmp $$arcpackedfile$$.tmp


[External compressor:oggre]
header = 0
packcmd = "ogg\oggre_enc" {options} $$arcdatafile$$.tmp $$arcpackedfile$$.tmp

[External compressor:srep]
header = 0
packcmd   = srep64 {-option } $$arcdatafile$$.tmp $$arcpackedfile$$.tmp
unpackcmd = srep64 -d $$arcpackedfile$$.tmp $$arcdatafile$$.tmp

[External compressor:uelr]
header = 0
packcmd   = "urle\uelr.exe" uv $$arcdatafile$$.tmp $$arcpackedfile$$.tmp

[External compressor:lzham,uharc,ecm,razor,nanozip]
header = 0
packcmd   = "PMT\PMT.exe" e {compressor} -b64M -t2 - - <stdin> <stdout>
unpackcmd = "PMT\PMT.exe" d {compressor} -t100p - - <stdin> <stdout>

[Lua code: disable REP method in "-dup" mode]
-- Example of extending FA with user code
onPostOption (function ()                               -- when option parsing is done
  if command.deduplication_mode then                    --   if -dup is enabled
    MapCompressionGroups (function (method)             --     go through each compression group, making changes to its compression method
      method = remove_compressors (method, "rep")       --       remove "rep" compressors from the compression method
      return (method=='' and "storing" or method)       --       if "rep" was the only compressor in the method, replace entire method with "storing"
    end)
  end
end)

onPostOption (function ()
   -- More examples of compression groups handling:
        AddCompressionGroup("exe+lzma:512m:ultra:a1:mfbt4:fb273:mc100000:lc8:lp4:pb4","$executable")
   --   RemoveCompressionGroups("$bmp")
	AddCompressionGroup("dict:64mb:80%:l8192:m400:s100+lzp:160mb:92%:145:h23:d1mb+ppmd:16:384mb","$text")
        AddCompressionGroup("lepton","$photo")
        AddCompressionGroup("jpg","$photo")
	AddCompressionGroup("packmp3+srep:m3f:a8+tor:7","$mp3")
	AddCompressionGroup("oggre","$ogg")
	AddCompressionGroup("srep:m3f:a1+tor:7:c4","$void")
	AddCompressionGroup("tta","$wavz")
	AddCompressionGroup("mscwav","$wavz")
        AddCompressionGroup("bpk+srep:m3f:a1+tor:6","$bink")
end)









